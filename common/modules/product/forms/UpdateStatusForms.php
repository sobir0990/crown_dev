<?php


namespace common\modules\product\forms;


use common\models\Balans;
use common\models\Order;
use common\models\Product;
use Yii;
use yii\base\Model;
use yii\web\NotFoundHttpException;

class UpdateStatusForms extends Model
{

    public $id;
    public $models;
    public $total_price;
    public $outgo_data;
    public $order;
    public $status;
    public $store_id;
    public $user_id;

    public function rules()
    {
        return [
            [['total_price', 'id'], 'integer'],
            [['models'], 'safe'],
        ];
    }

    /**
     * @throws NotFoundHttpException
     */
    public function init()
    {
        $this->order = Order::findOne($this->id);
        if (!($this->order instanceof Order)) {
            throw new NotFoundHttpException('Order is not found');
        }
        parent::init(); // TODO: Change the autogenerated stub
    }


    /**
     * @return array|Order|null
     * @throws NotFoundHttpException
     * @throws \yii\base\InvalidConfigException
     */
    public function updateStatus()
    {
        if (!$this->validate()) {
            return $this->getErrors();
        }

        $requestParams = $this->getRequestParams();

        $order = Order::findOne($this->id);
        if ($this->status !== null) {
            $order->status = $this->status;
        }

        switch ($requestParams['status']) {
            case Order::STATUS_REJECTED;
                $this->updateRejected($order);
                $order->updateAttributes(['status' => Order::STATUS_REJECTED]);
                break;

            case Order::STATUS_PROCESSING;
                $this->updateProcessing($order);
                $order->updateAttributes(['status' => Order::STATUS_PROCESSING]);
                break;

            case Order::STATUS_IMPLOMENTET;
                $this->updateImplomentet($order);
                $order->updateAttributes(['status' => Order::STATUS_IMPLOMENTET]);
                break;

            case Order::STATUS_ARMORED;
                $this->updateArmored($order);
                $order->updateAttributes(['status' => Order::STATUS_ARMORED]);
                break;
        }

        $this->updateBalance($order);
        return $order;

    }

    public function updateRejected($order)
    {
        $product = Product::find()
            ->andWhere(['order_id' => $order->id])
            ->all();

        foreach ($product as $item) {
            $item->updateAttributes(['status' => Order::STATUS_REJECTED]);
        }

    }


    public function updateProcessing($order)
    {
        $product = Product::find()
            ->andWhere(['order_id' => $order->id])
            ->all();

        foreach ($product as $item) {
            $item->updateAttributes(['status' => Order::STATUS_PROCESSING]);
        }
    }

    public function updateImplomentet($order)
    {
        $product = Product::find()
            ->andWhere(['order_id' => $order->id])
            ->all();

        foreach ($product as $item) {
            $item->updateAttributes(['status' => Order::STATUS_IMPLOMENTET]);
        }
    }


    public function updateArmored($order)
    {
        $product = Product::find()
            ->andWhere(['order_id' => $order->id])
            ->all();

        foreach ($product as $item) {
            $item->updateAttributes(['status' => Order::STATUS_ARMORED]);
        }
    }


    /**
     * @param $order
     * @return mixed
     * @throws NotFoundHttpException
     */
    private function updateBalance($order)
    {
        $balance = Balans::findOne(['order_id' => $order->id]);
        if ($balance instanceof Balans) {
            switch ($order->status) {
                case Order::STATUS_REJECTED:
                    $balance->updateAttributes(['status' => Balans::STATUS_REJECTED]);
                    break;

                case Order::STATUS_IMPLOMENTET:
                    $balance->updateAttributes(['status' => Balans::STATUS_APPROVED]);
                    break;

                case Order::STATUS_ARMORED:
                    $balance->updateAttributes(['status' => Balans::STATUS_BRON]);
                    break;

                default;
                    $balance->updateAttributes(['status' => Balans::STATUS_NOT_APPROVED]);
                    break;


            }
            return $order;
        }
        throw new NotFoundHttpException('Balance not found');
    }

    /**
     * @return array
     * @throws \yii\base\InvalidConfigException
     */
    public function getRequestParams()
    {
        $requestParams = Yii::$app->getRequest()->getBodyParams();
        if (empty($requestParams)) {
            $requestParams = Yii::$app->getRequest()->getQueryParams();
        }
        return $requestParams;
    }

}
