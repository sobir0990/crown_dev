<?php
namespace common\modules\product\forms;

use common\models\Balans;
use common\models\Models;
use common\models\Order;
use common\models\OrderProducts;
use common\models\Product;
use Yii;
use yii\helpers\ArrayHelper;
use yii\web\NotFoundHttpException;

class UpdateOrderForms extends Models
{
    public $id;
    public $models;
    public $total_price;
    public $outgo_data;
    public $order;
    public $status;
    public $store_id;
    public $user_id;

    public function rules()
    {
        return [
            [['total_price', 'id'], 'integer'],
            [['models'], 'safe'],
        ];
    }

    /**
     * @throws NotFoundHttpException
     */
    public function init()
    {
        $this->order = Order::findOne($this->id);
        if (!($this->order instanceof Order)) {
            throw new NotFoundHttpException('Order is not found');
        }
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @return array|bool|Order|false|int
     */
    public function updateOrder()
    {
        if (!$this->validate()) {
            return $this->getErrors();
        }

        $transaction = Yii::$app->db->beginTransaction();
        try {
            /**
             * @var $order Order
             */
            $order = $this->order;
            if ($this->status !== null) {
                $order->status = $this->status;
            }
            if ($this->total_price) {
                $order->price = $this->total_price;
            }
            $order->outgo_data = $this->outgo_data;
            $order->save();

            $this->updateBalance($order);

            if ($this->models !== null) {
                Product::deleteAll(['order_id' => $this->id]);

                foreach ($this->models as $item) {
                    $model = Models::findOne(['id' => $item['model_id']]);
                    if ($model->getCount($this->store_id) < $item['count']) {
                        $this->addError($model->name.' is not enough in storee');
                        return false;
                    }

                    $this->coming($model, $item);
                    $this->out($model, $item);
                }
            }

            $transaction->commit();
        } catch (\Exception $exception) {
            $transaction->rollBack();
            throw new \DomainException($exception->getMessage());
        }
        return $order;
    }

    /**
     * @param $model
     * @param $item
     * @return bool|Product
     */
    private function coming($model,$item)
    {
        $product = new Product();
        $product->price = $model->price;
        $product->models_category_id = $model->category_id;
        $product->models_id = $model->id;
        $product->user_id = $this->user_id;
        $product->coming_data = $this->outgo_data;
        $product->coming_outgo = Product::COMING;
        $product->from_user_id = $this->store_id;
        $product->count = $item['count'];
        $product->order_id = $this->id;
        if ($product->save()) {
            return $product;
        }
        $this->addError(json_decode($product->errors));
        return false;
    }

    private function out($model, $item)
    {
        $store = new Product();
        $store->user_id = $this->store_id;
        $store->coming_outgo = Product::OUTGO;
        $store->models_id = $model->id;
        $store->coming_data = $this->outgo_data;
        $store->models_category_id = $model->category_id;
        $store->from_user_id = $this->user_id;
        $store->count = $item['count'];
        $store->price = $model->price;
        $store->order_id = $this->id;
        if ($store->save()) {
            return $store;
        }
        $this->addError(json_decode($store->errors));
        return false;
    }

    /**
     * @param $order
     * @return mixed
     * @throws NotFoundHttpException
     */
    private function updateBalance($order)
    {
        $balance = Balans::findOne(['order_id' => $order->id]);
        if ($balance instanceof Balans) {
            switch ($order->status) {
                case Order::STATUS_REJECTED:
                    $balance->updateAttributes(['status' => Balans::STATUS_REJECTED, 'amount' => $this->total_price]);
                    break;
                case Order::STATUS_IMPLOMENTET:
                    $balance->updateAttributes(['status' => Balans::STATUS_APPROVED, 'amount' => $this->total_price]);
                    break;
                default:
                    $balance->updateAttributes(['amount' => $this->total_price]);
            }
            return $order;
        }
        throw new NotFoundHttpException('Balance not found');
    }
}
